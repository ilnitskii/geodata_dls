import streamlit as st
from PIL import Image
import io
import torch
from src.app.viz_utils import *

def show_results(model, uploaded_file):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –ø–∞—Ç—á–∏"""

    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞—Å—à—Ç–∞–±–∞", True)
    with st.sidebar:
        use_scale = st.checkbox("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—â–∞–¥—å –≤ –º¬≤", value=True)
        scale_ppm = get_scale_from_user() if use_scale else None

    with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image = Image.open(uploaded_file)
        img_array = np.array(image)
        
        # –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –ø–∞—Ç—á–∏
        patches, coords = split_to_patches(img_array, patch_size=512, overlap=64)
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—á–∞
        masks = []
        progress_bar = st.progress(0)
        for i, patch in enumerate(patches):
            tensor = preprocess_patch(patch).to(next(model.parameters()).device)
            with torch.no_grad():
                pred = model(tensor).squeeze().cpu().numpy()
            masks.append(pred)
            progress_bar.progress((i + 1) / len(patches))
        
        # –°–±–æ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        full_mask = merge_patches(masks, coords, img_array.shape)
        binary_mask = (full_mask > 0.5).astype(np.uint8) * 255
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        overlay = overlay_mask(img_array, binary_mask)
        
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")
        
        col1, col2 = st.columns(2)
        with col1:
            st.image(image, caption="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
                    use_container_width=True)
        with col2:
            st.image(binary_mask, caption="–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∑–¥–∞–Ω–∏–π", 
                    use_container_width=True,
                    clamp=True)
            
        show_ruler = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–∫—Å–µ–ª—å–Ω—É—é —à–∫–∞–ª—É", False)
        if show_ruler:
            tick_step = st.slider("–®–∞–≥ —à–∫–∞–ª—ã (–ø–∏–∫—Å–µ–ª–µ–π)", 50, 500, 100)
            overlay_with_ruler = add_pixel_ruler(overlay, tick_step)

        # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –º–∞—Å–∫–∏
        st.image(overlay_with_ruler if show_ruler else overlay, 
                caption="–ù–∞–ª–æ–∂–µ–Ω–∏–µ –º–∞—Å–∫–∏ –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
                width=800)
           
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        buf = io.BytesIO()  # –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏
        overlay_pil = Image.fromarray(overlay)  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PIL Image
        overlay_pil.save(buf, format='PNG')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
        byte_im = buf.getvalue()  # –ü–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã
        
        original_name = uploaded_file.name.split('.')[0]
        file_name = f"{original_name}_overlay.png"

        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–π –º–∞—Å–∫–æ–π (PNG)",
            data=byte_im,
            file_name=file_name,
            mime="image/png"
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        mask = full_mask > 0.5
        stats = calculate_mask_stats(img_array, mask)
        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Å–∫–∏")
        st.write(f"üîµ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π: {stats['total_pixels']:,}")
        st.write(f"üü¢ –ü–∏–∫—Å–µ–ª–µ–π –º–∞—Å–∫–∏: {stats['mask_pixels']:,}")
        st.write(f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: {stats['coverage_percent']:.2f}%")

        if scale_ppm is not None:
            area_m2 = calculate_area_m2(stats['mask_pixels'], scale_ppm)
            st.write(f"üìè –ü–ª–æ—â–∞–¥—å –º–∞—Å–∫–∏: {area_m2:.2f} –º¬≤ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–∞—Å—à—Ç–∞–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ª–µ–≤–æ–π —á–∞—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)")
            
    